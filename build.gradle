plugins {
    id 'java'
    id 'org.springframework.boot' version '2.5.14'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.modelmapper:modelmapper:2.4.3'
    implementation 'org.springdoc:springdoc-openapi-ui:1.5.13'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito:mockito-core'

}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file("$buildDir/jacocoHtml")
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'microservice/user/entity/**',
                    'microservice/user/dto/**',
                    'microservice/user/exeption/response/**'
            ])
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
    afterEvaluate {
        classDirectories.from = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'microservice/user/entity/**',
                    'microservice/user/dto/**',
                    'microservice/user/exeption/response/**'
            ])
        })
    }
}

check.dependsOn jacocoTestCoverageVerification

task startServer(dependsOn: 'bootRun') {
    doLast {
        println 'Server started successfully'
    }
}


task testAndCoverageReport(type: Task) {
    group = "Reporting"
    description = "Run test and generate coverage report"
    dependsOn 'test', 'jacocoTestReport', 'jacocoTestCoverageVerification'
}